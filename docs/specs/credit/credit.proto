syntax = "proto3";

package regen_network.credit;

import "third_party/mapbox/geobuf.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/descriptor.proto";

//
// Msg's
//

message MsgCreateCreditClass {
    bytes designer = 1;
    repeated bytes issuers = 2;
    bytes metadata = 3;
}

message MsgIssueCreditVintage {
    bytes credit_class = 1;
    string units = 2; // decimal
    bytes issuer = 3;
    bytes issuee = 4;
    bytes metadata = 5;
    geobuf.Data.Geometry geography = 6;
    google.protobuf.Timestamp start_date = 7;
    google.protobuf.Timestamp end_date = 8;
}

message MsgSend {
    bytes from = 1;
    bytes to = 2;
    repeated Asset assets = 3;
}

message MsgBurn {
    bytes account = 1;
    repeated Asset assets = 2;
}

//
// State
//

message Asset {
    bytes asset_id = 1;
    string amount = 2;
}

message CreditClassMetadata {
    bytes credit_class = 1;
    bytes designer = 2;
    repeated bytes issuers = 3;
    bytes metadata = 4;
    //    CreditType type = 4;
}

message CreditVintageMetadata {
    bytes asset_id = 1;
    bytes credit_class = 2;
    bytes issuer = 3;
    bytes metadata = 4;
}

message AssetSupply {
    bytes asset_id = 1;
    string liquid_supply = 2;
    string burned_supply = 3;
}

message AssetBalance {
    bytes account = 1;
    bytes asset_id = 2;
    string liquid_balance = 3;
    string burned_balance = 4;
}

//
// Queries
//
message GetBalancesRequest {
    // Specify the list of accounts to query balances for or leave empty
    // to query all accounts
    repeated bytes accounts = 1;
    // Specify the list of asset ID's to query balances for or leave empty
    // to query all assets
    repeated bytes asset_ids = 2;
    // Leave empty to specify no limit
    int64 limit = 3;
    int64 offset = 4;
}

message GetBalancesResponse {
    repeated AssetBalance balances = 1;
}

message GetSupplyRequest {
    bytes asset_id = 1;
}

message GetCreditClassMetadataRequest {
    bytes credit_class = 1;
}

message GetCreditVintageMetadataRequest {
    bytes asset_id = 1;
}

service Query {
    rpc GetBalance(GetBalancesRequest) returns (AssetBalance);
    rpc GetSupply(GetSupplyRequest) returns (AssetSupply);
    rpc GetCreditClassMetadata(GetCreditClassMetadataRequest) returns (CreditClassMetadata);
    rpc GetCreditMetadata(GetCreditVintageMetadataRequest) returns (CreditVintageMetadata);
}


