// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package bank

import (
	context "context"
	types1 "github.com/cosmos/cosmos-sdk/types"
	types "github.com/regen-network/regen-ledger/types"
	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	CreateDenom(ctx types.HasContext, in *MsgCreateDenomRequest, opts ...grpc.CallOption) (*MsgCreateDenomResponse, error)
	// Mint is a method for minting new coins. It is subject to each denom's send rule.
	Mint(ctx types.HasContext, in *MsgMintRequest, opts ...grpc.CallOption) (*MsgMintResponse, error)
	// Move is a method for a module, contract, or other trusted third party
	// to move coins from one account to another account. It is subject to each denom's move rule.
	Move(ctx types.HasContext, in *MsgMoveRequest, opts ...grpc.CallOption) (*MsgMoveResponse, error)
	// Send is a method for sending coins from one account to another account.
	// It is subject to each denom's send rule.
	Send(ctx types.HasContext, in *MsgSendRequest, opts ...grpc.CallOption) (*MsgSendResponse, error)
	// Burn is method for burning coins. It is subject to each denom's burn rule.
	Burn(ctx types.HasContext, in *MsgBurnRequest, opts ...grpc.CallOption) (*MsgBurnResponse, error)
	// SetPrecision allows an issuer to increase the decimal precision of a denom.
	// It is an experimental feature to concretely explore an idea proposed
	// in https://github.com/cosmos/cosmos-sdk/issues/7113. The number of decimal
	// places allowed for a credit batch is determined by the original number of
	// decimal places used with calling CreateDenom. SetPrecision allows the number
	// of allowed decimal places to be increased, effectively making the supply
	// more granular without actually changing any balances. It allows asset
	// issuers to be able to issue an asset without needing to think about how
	// many subdivisions are needed upfront. While it may not be relevant for
	// credits which likely have a fairly stable market value, I wanted to
	// experiment a bit and this serves as a proof of concept for a broader bank
	// redesign where say for instance a coin like the ATOM or XRN could be issued
	// in its own units rather than micro or nano-units. Instead an operation like
	// SetPrecision would allow trading in micro, nano or pico in the future based
	// on market demand. Arbitrary, unbounded precision is not desirable because
	// this can lead to spam attacks (like sending
	// 0.000000000000000000000000000001 coins). This is effectively fixed
	// precision so under the hood it is still basically an integer, but the fixed
	// precision can be increased so its more adaptable long term than just an
	// integer.
	SetPrecision(ctx types.HasContext, in *MsgSetPrecisionRequest, opts ...grpc.CallOption) (*MsgSetPrecisionResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateDenom(ctx types.HasContext, in *MsgCreateDenomRequest, opts ...grpc.CallOption) (*MsgCreateDenomResponse, error) {
	out := new(MsgCreateDenomResponse)
	err := c.cc.Invoke(ctx.Context(), "/regen.bank.v1alpha1.Msg/CreateDenom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Mint(ctx types.HasContext, in *MsgMintRequest, opts ...grpc.CallOption) (*MsgMintResponse, error) {
	out := new(MsgMintResponse)
	err := c.cc.Invoke(ctx.Context(), "/regen.bank.v1alpha1.Msg/Mint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Move(ctx types.HasContext, in *MsgMoveRequest, opts ...grpc.CallOption) (*MsgMoveResponse, error) {
	out := new(MsgMoveResponse)
	err := c.cc.Invoke(ctx.Context(), "/regen.bank.v1alpha1.Msg/Move", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Send(ctx types.HasContext, in *MsgSendRequest, opts ...grpc.CallOption) (*MsgSendResponse, error) {
	out := new(MsgSendResponse)
	err := c.cc.Invoke(ctx.Context(), "/regen.bank.v1alpha1.Msg/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Burn(ctx types.HasContext, in *MsgBurnRequest, opts ...grpc.CallOption) (*MsgBurnResponse, error) {
	out := new(MsgBurnResponse)
	err := c.cc.Invoke(ctx.Context(), "/regen.bank.v1alpha1.Msg/Burn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetPrecision(ctx types.HasContext, in *MsgSetPrecisionRequest, opts ...grpc.CallOption) (*MsgSetPrecisionResponse, error) {
	out := new(MsgSetPrecisionResponse)
	err := c.cc.Invoke(ctx.Context(), "/regen.bank.v1alpha1.Msg/SetPrecision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	CreateDenom(types1.Context, *MsgCreateDenomRequest) (*MsgCreateDenomResponse, error)
	// Mint is a method for minting new coins. It is subject to each denom's send rule.
	Mint(types1.Context, *MsgMintRequest) (*MsgMintResponse, error)
	// Move is a method for a module, contract, or other trusted third party
	// to move coins from one account to another account. It is subject to each denom's move rule.
	Move(types1.Context, *MsgMoveRequest) (*MsgMoveResponse, error)
	// Send is a method for sending coins from one account to another account.
	// It is subject to each denom's send rule.
	Send(types1.Context, *MsgSendRequest) (*MsgSendResponse, error)
	// Burn is method for burning coins. It is subject to each denom's burn rule.
	Burn(types1.Context, *MsgBurnRequest) (*MsgBurnResponse, error)
	// SetPrecision allows an issuer to increase the decimal precision of a denom.
	// It is an experimental feature to concretely explore an idea proposed
	// in https://github.com/cosmos/cosmos-sdk/issues/7113. The number of decimal
	// places allowed for a credit batch is determined by the original number of
	// decimal places used with calling CreateDenom. SetPrecision allows the number
	// of allowed decimal places to be increased, effectively making the supply
	// more granular without actually changing any balances. It allows asset
	// issuers to be able to issue an asset without needing to think about how
	// many subdivisions are needed upfront. While it may not be relevant for
	// credits which likely have a fairly stable market value, I wanted to
	// experiment a bit and this serves as a proof of concept for a broader bank
	// redesign where say for instance a coin like the ATOM or XRN could be issued
	// in its own units rather than micro or nano-units. Instead an operation like
	// SetPrecision would allow trading in micro, nano or pico in the future based
	// on market demand. Arbitrary, unbounded precision is not desirable because
	// this can lead to spam attacks (like sending
	// 0.000000000000000000000000000001 coins). This is effectively fixed
	// precision so under the hood it is still basically an integer, but the fixed
	// precision can be increased so its more adaptable long term than just an
	// integer.
	SetPrecision(types1.Context, *MsgSetPrecisionRequest) (*MsgSetPrecisionResponse, error)
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_CreateDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateDenom(types1.UnwrapSDKContext(ctx), in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/regen.bank.v1alpha1.Msg/CreateDenom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateDenom(types1.UnwrapSDKContext(ctx), req.(*MsgCreateDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Mint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Mint(types1.UnwrapSDKContext(ctx), in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/regen.bank.v1alpha1.Msg/Mint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Mint(types1.UnwrapSDKContext(ctx), req.(*MsgMintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Move_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Move(types1.UnwrapSDKContext(ctx), in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/regen.bank.v1alpha1.Msg/Move",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Move(types1.UnwrapSDKContext(ctx), req.(*MsgMoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Send(types1.UnwrapSDKContext(ctx), in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/regen.bank.v1alpha1.Msg/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Send(types1.UnwrapSDKContext(ctx), req.(*MsgSendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Burn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBurnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Burn(types1.UnwrapSDKContext(ctx), in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/regen.bank.v1alpha1.Msg/Burn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Burn(types1.UnwrapSDKContext(ctx), req.(*MsgBurnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetPrecision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetPrecisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetPrecision(types1.UnwrapSDKContext(ctx), in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/regen.bank.v1alpha1.Msg/SetPrecision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetPrecision(types1.UnwrapSDKContext(ctx), req.(*MsgSetPrecisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "regen.bank.v1alpha1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDenom",
			Handler:    _Msg_CreateDenom_Handler,
		},
		{
			MethodName: "Mint",
			Handler:    _Msg_Mint_Handler,
		},
		{
			MethodName: "Move",
			Handler:    _Msg_Move_Handler,
		},
		{
			MethodName: "Send",
			Handler:    _Msg_Send_Handler,
		},
		{
			MethodName: "Burn",
			Handler:    _Msg_Burn_Handler,
		},
		{
			MethodName: "SetPrecision",
			Handler:    _Msg_SetPrecision_Handler,
		},
	},
	Metadata: "regen/bank/v1alpha1/tx.proto",
}
