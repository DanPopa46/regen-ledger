// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package data

import (
	context "context"
	types "github.com/regen-network/regen-ledger/types"
	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// ById queries data based on its ID.
	ById(ctx context.Context, in *QueryByIdRequest, opts ...grpc.CallOption) (*QueryByIdResponse, error)
	// BySigner queries data based on signers.
	BySigner(ctx context.Context, in *QueryBySignerRequest, opts ...grpc.CallOption) (*QueryBySignerResponse, error)
}

type queryClient struct {
	cc        grpc.ClientConnInterface
	_ById     types.Invoker
	_BySigner types.Invoker
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc: cc}
}

func (c *queryClient) ById(ctx context.Context, in *QueryByIdRequest, opts ...grpc.CallOption) (*QueryByIdResponse, error) {
	if invoker := c._ById; invoker != nil {
		var out QueryByIdResponse
		err := invoker(ctx, in, &out)
		return &out, err
	}
	if invokerConn, ok := c.cc.(types.InvokerConn); ok {
		var err error
		c._ById, err = invokerConn.Invoker("/regen.data.v1alpha2.Query/ById")
		if err != nil {
			var out QueryByIdResponse
			err = c._ById(ctx, in, &out)
			return &out, err
		}
	}
	out := new(QueryByIdResponse)
	err := c.cc.Invoke(ctx, "/regen.data.v1alpha2.Query/ById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BySigner(ctx context.Context, in *QueryBySignerRequest, opts ...grpc.CallOption) (*QueryBySignerResponse, error) {
	if invoker := c._BySigner; invoker != nil {
		var out QueryBySignerResponse
		err := invoker(ctx, in, &out)
		return &out, err
	}
	if invokerConn, ok := c.cc.(types.InvokerConn); ok {
		var err error
		c._BySigner, err = invokerConn.Invoker("/regen.data.v1alpha2.Query/BySigner")
		if err != nil {
			var out QueryBySignerResponse
			err = c._BySigner(ctx, in, &out)
			return &out, err
		}
	}
	out := new(QueryBySignerResponse)
	err := c.cc.Invoke(ctx, "/regen.data.v1alpha2.Query/BySigner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// ById queries data based on its ID.
	ById(types.Context, *QueryByIdRequest) (*QueryByIdResponse, error)
	// BySigner queries data based on signers.
	BySigner(types.Context, *QueryBySignerRequest) (*QueryBySignerResponse, error)
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_ById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ById(types.UnwrapSDKContext(ctx), in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/regen.data.v1alpha2.Query/ById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ById(types.UnwrapSDKContext(ctx), req.(*QueryByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BySigner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBySignerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BySigner(types.UnwrapSDKContext(ctx), in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/regen.data.v1alpha2.Query/BySigner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BySigner(types.UnwrapSDKContext(ctx), req.(*QueryBySignerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "regen.data.v1alpha2.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ById",
			Handler:    _Query_ById_Handler,
		},
		{
			MethodName: "BySigner",
			Handler:    _Query_BySigner_Handler,
		},
	},
	Metadata: "regen/data/v1alpha2/query.proto",
}

const (
	QueryByIdMethod     = "/regen.data.v1alpha2.Query/ById"
	QueryBySignerMethod = "/regen.data.v1alpha2.Query/BySigner"
)
