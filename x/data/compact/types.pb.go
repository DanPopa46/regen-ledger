// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: regen/data/internal/v1alpha2/types.proto

package compact

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CompactDataset_WellknownDatatype int32

const (
	CompactDataset_DATATYPE_UNSPECIFIED   CompactDataset_WellknownDatatype = 0
	CompactDataset_DATATYPE_BOOL_FALSE    CompactDataset_WellknownDatatype = 1
	CompactDataset_DATATYPE_BOOL_TRUE     CompactDataset_WellknownDatatype = 2
	CompactDataset_DATATYPE_DECIMAL       CompactDataset_WellknownDatatype = 3
	CompactDataset_DATATYPE_INTEGER       CompactDataset_WellknownDatatype = 4
	CompactDataset_DATATYPE_STRING        CompactDataset_WellknownDatatype = 5
	CompactDataset_DATATYPE_ANY_URI       CompactDataset_WellknownDatatype = 6
	CompactDataset_DATATYPE_DATE          CompactDataset_WellknownDatatype = 7
	CompactDataset_DATATYPE_TIME          CompactDataset_WellknownDatatype = 8
	CompactDataset_DATATYPE_DATE_TIME     CompactDataset_WellknownDatatype = 9
	CompactDataset_DATATYPE_BASE64_STRING CompactDataset_WellknownDatatype = 10
	CompactDataset_DATATYPE_WKT_LITERAL   CompactDataset_WellknownDatatype = 11
)

var CompactDataset_WellknownDatatype_name = map[int32]string{
	0:  "DATATYPE_UNSPECIFIED",
	1:  "DATATYPE_BOOL_FALSE",
	2:  "DATATYPE_BOOL_TRUE",
	3:  "DATATYPE_DECIMAL",
	4:  "DATATYPE_INTEGER",
	5:  "DATATYPE_STRING",
	6:  "DATATYPE_ANY_URI",
	7:  "DATATYPE_DATE",
	8:  "DATATYPE_TIME",
	9:  "DATATYPE_DATE_TIME",
	10: "DATATYPE_BASE64_STRING",
	11: "DATATYPE_WKT_LITERAL",
}

var CompactDataset_WellknownDatatype_value = map[string]int32{
	"DATATYPE_UNSPECIFIED":   0,
	"DATATYPE_BOOL_FALSE":    1,
	"DATATYPE_BOOL_TRUE":     2,
	"DATATYPE_DECIMAL":       3,
	"DATATYPE_INTEGER":       4,
	"DATATYPE_STRING":        5,
	"DATATYPE_ANY_URI":       6,
	"DATATYPE_DATE":          7,
	"DATATYPE_TIME":          8,
	"DATATYPE_DATE_TIME":     9,
	"DATATYPE_BASE64_STRING": 10,
	"DATATYPE_WKT_LITERAL":   11,
}

func (x CompactDataset_WellknownDatatype) String() string {
	return proto.EnumName(CompactDataset_WellknownDatatype_name, int32(x))
}

func (CompactDataset_WellknownDatatype) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d03575205ba2e5ad, []int{0, 0}
}

type CompactDataset struct {
	Nodes   []*CompactDataset_Node `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	NewIris []string               `protobuf:"bytes,2,rep,name=new_iris,json=newIris,proto3" json:"new_iris,omitempty"`
}

func (m *CompactDataset) Reset()         { *m = CompactDataset{} }
func (m *CompactDataset) String() string { return proto.CompactTextString(m) }
func (*CompactDataset) ProtoMessage()    {}
func (*CompactDataset) Descriptor() ([]byte, []int) {
	return fileDescriptor_d03575205ba2e5ad, []int{0}
}
func (m *CompactDataset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompactDataset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompactDataset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompactDataset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompactDataset.Merge(m, src)
}
func (m *CompactDataset) XXX_Size() int {
	return m.Size()
}
func (m *CompactDataset) XXX_DiscardUnknown() {
	xxx_messageInfo_CompactDataset.DiscardUnknown(m)
}

var xxx_messageInfo_CompactDataset proto.InternalMessageInfo

func (m *CompactDataset) GetNodes() []*CompactDataset_Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *CompactDataset) GetNewIris() []string {
	if m != nil {
		return m.NewIris
	}
	return nil
}

type CompactDataset_Node struct {
	// Types that are valid to be assigned to Subject:
	//	*CompactDataset_Node_InternalId
	//	*CompactDataset_Node_LocalRef
	Subject    isCompactDataset_Node_Subject `protobuf_oneof:"subject"`
	Properties []*CompactDataset_Properties  `protobuf:"bytes,3,rep,name=properties,proto3" json:"properties,omitempty"`
}

func (m *CompactDataset_Node) Reset()         { *m = CompactDataset_Node{} }
func (m *CompactDataset_Node) String() string { return proto.CompactTextString(m) }
func (*CompactDataset_Node) ProtoMessage()    {}
func (*CompactDataset_Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_d03575205ba2e5ad, []int{0, 0}
}
func (m *CompactDataset_Node) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompactDataset_Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompactDataset_Node.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompactDataset_Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompactDataset_Node.Merge(m, src)
}
func (m *CompactDataset_Node) XXX_Size() int {
	return m.Size()
}
func (m *CompactDataset_Node) XXX_DiscardUnknown() {
	xxx_messageInfo_CompactDataset_Node.DiscardUnknown(m)
}

var xxx_messageInfo_CompactDataset_Node proto.InternalMessageInfo

type isCompactDataset_Node_Subject interface {
	isCompactDataset_Node_Subject()
	MarshalTo([]byte) (int, error)
	Size() int
}

type CompactDataset_Node_InternalId struct {
	InternalId []byte `protobuf:"bytes,1,opt,name=internal_id,json=internalId,proto3,oneof" json:"internal_id,omitempty"`
}
type CompactDataset_Node_LocalRef struct {
	LocalRef int32 `protobuf:"zigzag32,2,opt,name=local_ref,json=localRef,proto3,oneof" json:"local_ref,omitempty"`
}

func (*CompactDataset_Node_InternalId) isCompactDataset_Node_Subject() {}
func (*CompactDataset_Node_LocalRef) isCompactDataset_Node_Subject()   {}

func (m *CompactDataset_Node) GetSubject() isCompactDataset_Node_Subject {
	if m != nil {
		return m.Subject
	}
	return nil
}

func (m *CompactDataset_Node) GetInternalId() []byte {
	if x, ok := m.GetSubject().(*CompactDataset_Node_InternalId); ok {
		return x.InternalId
	}
	return nil
}

func (m *CompactDataset_Node) GetLocalRef() int32 {
	if x, ok := m.GetSubject().(*CompactDataset_Node_LocalRef); ok {
		return x.LocalRef
	}
	return 0
}

func (m *CompactDataset_Node) GetProperties() []*CompactDataset_Properties {
	if m != nil {
		return m.Properties
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CompactDataset_Node) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CompactDataset_Node_InternalId)(nil),
		(*CompactDataset_Node_LocalRef)(nil),
	}
}

type CompactDataset_Properties struct {
	// Types that are valid to be assigned to Predicate:
	//	*CompactDataset_Properties_InternalId
	//	*CompactDataset_Properties_LocalRef
	Predicate isCompactDataset_Properties_Predicate `protobuf_oneof:"predicate"`
	Objects   []*CompactDataset_ObjectGraph         `protobuf:"bytes,3,rep,name=objects,proto3" json:"objects,omitempty"`
}

func (m *CompactDataset_Properties) Reset()         { *m = CompactDataset_Properties{} }
func (m *CompactDataset_Properties) String() string { return proto.CompactTextString(m) }
func (*CompactDataset_Properties) ProtoMessage()    {}
func (*CompactDataset_Properties) Descriptor() ([]byte, []int) {
	return fileDescriptor_d03575205ba2e5ad, []int{0, 1}
}
func (m *CompactDataset_Properties) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompactDataset_Properties) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompactDataset_Properties.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompactDataset_Properties) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompactDataset_Properties.Merge(m, src)
}
func (m *CompactDataset_Properties) XXX_Size() int {
	return m.Size()
}
func (m *CompactDataset_Properties) XXX_DiscardUnknown() {
	xxx_messageInfo_CompactDataset_Properties.DiscardUnknown(m)
}

var xxx_messageInfo_CompactDataset_Properties proto.InternalMessageInfo

type isCompactDataset_Properties_Predicate interface {
	isCompactDataset_Properties_Predicate()
	MarshalTo([]byte) (int, error)
	Size() int
}

type CompactDataset_Properties_InternalId struct {
	InternalId []byte `protobuf:"bytes,1,opt,name=internal_id,json=internalId,proto3,oneof" json:"internal_id,omitempty"`
}
type CompactDataset_Properties_LocalRef struct {
	LocalRef int32 `protobuf:"zigzag32,2,opt,name=local_ref,json=localRef,proto3,oneof" json:"local_ref,omitempty"`
}

func (*CompactDataset_Properties_InternalId) isCompactDataset_Properties_Predicate() {}
func (*CompactDataset_Properties_LocalRef) isCompactDataset_Properties_Predicate()   {}

func (m *CompactDataset_Properties) GetPredicate() isCompactDataset_Properties_Predicate {
	if m != nil {
		return m.Predicate
	}
	return nil
}

func (m *CompactDataset_Properties) GetInternalId() []byte {
	if x, ok := m.GetPredicate().(*CompactDataset_Properties_InternalId); ok {
		return x.InternalId
	}
	return nil
}

func (m *CompactDataset_Properties) GetLocalRef() int32 {
	if x, ok := m.GetPredicate().(*CompactDataset_Properties_LocalRef); ok {
		return x.LocalRef
	}
	return 0
}

func (m *CompactDataset_Properties) GetObjects() []*CompactDataset_ObjectGraph {
	if m != nil {
		return m.Objects
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CompactDataset_Properties) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CompactDataset_Properties_InternalId)(nil),
		(*CompactDataset_Properties_LocalRef)(nil),
	}
}

type CompactDataset_ObjectGraph struct {
	// Types that are valid to be assigned to Sum:
	//	*CompactDataset_ObjectGraph_ObjectInternalId
	//	*CompactDataset_ObjectGraph_ObjectLocalRef
	//	*CompactDataset_ObjectGraph_WellKnownDatatype
	//	*CompactDataset_ObjectGraph_DataTypeInternalId
	//	*CompactDataset_ObjectGraph_DataTypeLocalRef
	Sum    isCompactDataset_ObjectGraph_Sum      `protobuf_oneof:"sum"`
	Lang   string                                `protobuf:"bytes,6,opt,name=lang,proto3" json:"lang,omitempty"`
	Graphs []*CompactDataset_ObjectGraph_GraphID `protobuf:"bytes,7,rep,name=graphs,proto3" json:"graphs,omitempty"`
	// Types that are valid to be assigned to LiteralValue:
	//	*CompactDataset_ObjectGraph_StrValue
	LiteralValue isCompactDataset_ObjectGraph_LiteralValue `protobuf_oneof:"literal_value"`
}

func (m *CompactDataset_ObjectGraph) Reset()         { *m = CompactDataset_ObjectGraph{} }
func (m *CompactDataset_ObjectGraph) String() string { return proto.CompactTextString(m) }
func (*CompactDataset_ObjectGraph) ProtoMessage()    {}
func (*CompactDataset_ObjectGraph) Descriptor() ([]byte, []int) {
	return fileDescriptor_d03575205ba2e5ad, []int{0, 2}
}
func (m *CompactDataset_ObjectGraph) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompactDataset_ObjectGraph) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompactDataset_ObjectGraph.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompactDataset_ObjectGraph) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompactDataset_ObjectGraph.Merge(m, src)
}
func (m *CompactDataset_ObjectGraph) XXX_Size() int {
	return m.Size()
}
func (m *CompactDataset_ObjectGraph) XXX_DiscardUnknown() {
	xxx_messageInfo_CompactDataset_ObjectGraph.DiscardUnknown(m)
}

var xxx_messageInfo_CompactDataset_ObjectGraph proto.InternalMessageInfo

type isCompactDataset_ObjectGraph_Sum interface {
	isCompactDataset_ObjectGraph_Sum()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCompactDataset_ObjectGraph_LiteralValue interface {
	isCompactDataset_ObjectGraph_LiteralValue()
	MarshalTo([]byte) (int, error)
	Size() int
}

type CompactDataset_ObjectGraph_ObjectInternalId struct {
	ObjectInternalId []byte `protobuf:"bytes,1,opt,name=object_internal_id,json=objectInternalId,proto3,oneof" json:"object_internal_id,omitempty"`
}
type CompactDataset_ObjectGraph_ObjectLocalRef struct {
	ObjectLocalRef int32 `protobuf:"zigzag32,2,opt,name=object_local_ref,json=objectLocalRef,proto3,oneof" json:"object_local_ref,omitempty"`
}
type CompactDataset_ObjectGraph_WellKnownDatatype struct {
	WellKnownDatatype CompactDataset_WellknownDatatype `protobuf:"varint,3,opt,name=well_known_datatype,json=wellKnownDatatype,proto3,enum=regen.data.internal.v1alpha2.CompactDataset_WellknownDatatype,oneof" json:"well_known_datatype,omitempty"`
}
type CompactDataset_ObjectGraph_DataTypeInternalId struct {
	DataTypeInternalId []byte `protobuf:"bytes,4,opt,name=data_type_internal_id,json=dataTypeInternalId,proto3,oneof" json:"data_type_internal_id,omitempty"`
}
type CompactDataset_ObjectGraph_DataTypeLocalRef struct {
	DataTypeLocalRef int32 `protobuf:"zigzag32,5,opt,name=data_type_local_ref,json=dataTypeLocalRef,proto3,oneof" json:"data_type_local_ref,omitempty"`
}
type CompactDataset_ObjectGraph_StrValue struct {
	StrValue string `protobuf:"bytes,8,opt,name=str_value,json=strValue,proto3,oneof" json:"str_value,omitempty"`
}

func (*CompactDataset_ObjectGraph_ObjectInternalId) isCompactDataset_ObjectGraph_Sum()   {}
func (*CompactDataset_ObjectGraph_ObjectLocalRef) isCompactDataset_ObjectGraph_Sum()     {}
func (*CompactDataset_ObjectGraph_WellKnownDatatype) isCompactDataset_ObjectGraph_Sum()  {}
func (*CompactDataset_ObjectGraph_DataTypeInternalId) isCompactDataset_ObjectGraph_Sum() {}
func (*CompactDataset_ObjectGraph_DataTypeLocalRef) isCompactDataset_ObjectGraph_Sum()   {}
func (*CompactDataset_ObjectGraph_StrValue) isCompactDataset_ObjectGraph_LiteralValue()  {}

func (m *CompactDataset_ObjectGraph) GetSum() isCompactDataset_ObjectGraph_Sum {
	if m != nil {
		return m.Sum
	}
	return nil
}
func (m *CompactDataset_ObjectGraph) GetLiteralValue() isCompactDataset_ObjectGraph_LiteralValue {
	if m != nil {
		return m.LiteralValue
	}
	return nil
}

func (m *CompactDataset_ObjectGraph) GetObjectInternalId() []byte {
	if x, ok := m.GetSum().(*CompactDataset_ObjectGraph_ObjectInternalId); ok {
		return x.ObjectInternalId
	}
	return nil
}

func (m *CompactDataset_ObjectGraph) GetObjectLocalRef() int32 {
	if x, ok := m.GetSum().(*CompactDataset_ObjectGraph_ObjectLocalRef); ok {
		return x.ObjectLocalRef
	}
	return 0
}

func (m *CompactDataset_ObjectGraph) GetWellKnownDatatype() CompactDataset_WellknownDatatype {
	if x, ok := m.GetSum().(*CompactDataset_ObjectGraph_WellKnownDatatype); ok {
		return x.WellKnownDatatype
	}
	return CompactDataset_DATATYPE_UNSPECIFIED
}

func (m *CompactDataset_ObjectGraph) GetDataTypeInternalId() []byte {
	if x, ok := m.GetSum().(*CompactDataset_ObjectGraph_DataTypeInternalId); ok {
		return x.DataTypeInternalId
	}
	return nil
}

func (m *CompactDataset_ObjectGraph) GetDataTypeLocalRef() int32 {
	if x, ok := m.GetSum().(*CompactDataset_ObjectGraph_DataTypeLocalRef); ok {
		return x.DataTypeLocalRef
	}
	return 0
}

func (m *CompactDataset_ObjectGraph) GetLang() string {
	if m != nil {
		return m.Lang
	}
	return ""
}

func (m *CompactDataset_ObjectGraph) GetGraphs() []*CompactDataset_ObjectGraph_GraphID {
	if m != nil {
		return m.Graphs
	}
	return nil
}

func (m *CompactDataset_ObjectGraph) GetStrValue() string {
	if x, ok := m.GetLiteralValue().(*CompactDataset_ObjectGraph_StrValue); ok {
		return x.StrValue
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CompactDataset_ObjectGraph) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CompactDataset_ObjectGraph_ObjectInternalId)(nil),
		(*CompactDataset_ObjectGraph_ObjectLocalRef)(nil),
		(*CompactDataset_ObjectGraph_WellKnownDatatype)(nil),
		(*CompactDataset_ObjectGraph_DataTypeInternalId)(nil),
		(*CompactDataset_ObjectGraph_DataTypeLocalRef)(nil),
		(*CompactDataset_ObjectGraph_StrValue)(nil),
	}
}

type CompactDataset_ObjectGraph_GraphID struct {
	// Types that are valid to be assigned to Graph:
	//	*CompactDataset_ObjectGraph_GraphID_InternalId
	//	*CompactDataset_ObjectGraph_GraphID_LocalRef
	Graph isCompactDataset_ObjectGraph_GraphID_Graph `protobuf_oneof:"graph"`
}

func (m *CompactDataset_ObjectGraph_GraphID) Reset()         { *m = CompactDataset_ObjectGraph_GraphID{} }
func (m *CompactDataset_ObjectGraph_GraphID) String() string { return proto.CompactTextString(m) }
func (*CompactDataset_ObjectGraph_GraphID) ProtoMessage()    {}
func (*CompactDataset_ObjectGraph_GraphID) Descriptor() ([]byte, []int) {
	return fileDescriptor_d03575205ba2e5ad, []int{0, 2, 0}
}
func (m *CompactDataset_ObjectGraph_GraphID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompactDataset_ObjectGraph_GraphID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompactDataset_ObjectGraph_GraphID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompactDataset_ObjectGraph_GraphID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompactDataset_ObjectGraph_GraphID.Merge(m, src)
}
func (m *CompactDataset_ObjectGraph_GraphID) XXX_Size() int {
	return m.Size()
}
func (m *CompactDataset_ObjectGraph_GraphID) XXX_DiscardUnknown() {
	xxx_messageInfo_CompactDataset_ObjectGraph_GraphID.DiscardUnknown(m)
}

var xxx_messageInfo_CompactDataset_ObjectGraph_GraphID proto.InternalMessageInfo

type isCompactDataset_ObjectGraph_GraphID_Graph interface {
	isCompactDataset_ObjectGraph_GraphID_Graph()
	MarshalTo([]byte) (int, error)
	Size() int
}

type CompactDataset_ObjectGraph_GraphID_InternalId struct {
	InternalId []byte `protobuf:"bytes,1,opt,name=internal_id,json=internalId,proto3,oneof" json:"internal_id,omitempty"`
}
type CompactDataset_ObjectGraph_GraphID_LocalRef struct {
	LocalRef int32 `protobuf:"zigzag32,2,opt,name=local_ref,json=localRef,proto3,oneof" json:"local_ref,omitempty"`
}

func (*CompactDataset_ObjectGraph_GraphID_InternalId) isCompactDataset_ObjectGraph_GraphID_Graph() {}
func (*CompactDataset_ObjectGraph_GraphID_LocalRef) isCompactDataset_ObjectGraph_GraphID_Graph()   {}

func (m *CompactDataset_ObjectGraph_GraphID) GetGraph() isCompactDataset_ObjectGraph_GraphID_Graph {
	if m != nil {
		return m.Graph
	}
	return nil
}

func (m *CompactDataset_ObjectGraph_GraphID) GetInternalId() []byte {
	if x, ok := m.GetGraph().(*CompactDataset_ObjectGraph_GraphID_InternalId); ok {
		return x.InternalId
	}
	return nil
}

func (m *CompactDataset_ObjectGraph_GraphID) GetLocalRef() int32 {
	if x, ok := m.GetGraph().(*CompactDataset_ObjectGraph_GraphID_LocalRef); ok {
		return x.LocalRef
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CompactDataset_ObjectGraph_GraphID) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CompactDataset_ObjectGraph_GraphID_InternalId)(nil),
		(*CompactDataset_ObjectGraph_GraphID_LocalRef)(nil),
	}
}

func init() {
	proto.RegisterEnum("regen.data.internal.v1alpha2.CompactDataset_WellknownDatatype", CompactDataset_WellknownDatatype_name, CompactDataset_WellknownDatatype_value)
	proto.RegisterType((*CompactDataset)(nil), "regen.data.internal.v1alpha2.CompactDataset")
	proto.RegisterType((*CompactDataset_Node)(nil), "regen.data.internal.v1alpha2.CompactDataset.Node")
	proto.RegisterType((*CompactDataset_Properties)(nil), "regen.data.internal.v1alpha2.CompactDataset.Properties")
	proto.RegisterType((*CompactDataset_ObjectGraph)(nil), "regen.data.internal.v1alpha2.CompactDataset.ObjectGraph")
	proto.RegisterType((*CompactDataset_ObjectGraph_GraphID)(nil), "regen.data.internal.v1alpha2.CompactDataset.ObjectGraph.GraphID")
}

func init() {
	proto.RegisterFile("regen/data/internal/v1alpha2/types.proto", fileDescriptor_d03575205ba2e5ad)
}

var fileDescriptor_d03575205ba2e5ad = []byte{
	// 711 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xcb, 0x6e, 0xd3, 0x40,
	0x14, 0x8d, 0xf3, 0xce, 0x0d, 0x6d, 0x9d, 0x49, 0x29, 0x26, 0x82, 0x28, 0x74, 0x15, 0x21, 0xe1,
	0xa8, 0x0f, 0x01, 0x2b, 0x84, 0xd3, 0xb8, 0x89, 0xd5, 0x34, 0xad, 0x26, 0x2e, 0xa5, 0x6c, 0x2c,
	0x37, 0x99, 0xa6, 0xa6, 0xae, 0x6d, 0x8d, 0x27, 0x0d, 0xfd, 0x0b, 0x7e, 0x03, 0x09, 0x89, 0x1f,
	0x60, 0xc1, 0x92, 0x65, 0x97, 0x2c, 0x51, 0xfb, 0x23, 0xc8, 0xaf, 0x24, 0x56, 0x11, 0x52, 0x81,
	0x4d, 0x94, 0x39, 0xf7, 0xdc, 0x73, 0xcf, 0xf1, 0x5c, 0x0d, 0xd4, 0x29, 0x19, 0x11, 0xab, 0x31,
	0xd4, 0x99, 0xde, 0x30, 0x2c, 0x46, 0xa8, 0xa5, 0x9b, 0x8d, 0x8b, 0x35, 0xdd, 0x74, 0x4e, 0xf5,
	0xf5, 0x06, 0xbb, 0x74, 0x88, 0x2b, 0x3a, 0xd4, 0x66, 0x36, 0x7a, 0xe4, 0x33, 0x45, 0x8f, 0x29,
	0x46, 0x4c, 0x31, 0x62, 0xae, 0x7e, 0x03, 0x58, 0xdc, 0xb2, 0xcf, 0x1d, 0x7d, 0xc0, 0x5a, 0x3a,
	0xd3, 0x5d, 0xc2, 0x50, 0x1b, 0x32, 0x96, 0x3d, 0x24, 0xae, 0xc0, 0xd5, 0x52, 0xf5, 0xe2, 0xfa,
	0x9a, 0xf8, 0x27, 0x01, 0x31, 0xde, 0x2c, 0xf6, 0xec, 0x21, 0xc1, 0x41, 0x3f, 0x7a, 0x08, 0x79,
	0x8b, 0x4c, 0x34, 0x83, 0x1a, 0xae, 0x90, 0xac, 0xa5, 0xea, 0x05, 0x9c, 0xb3, 0xc8, 0x44, 0xa1,
	0x86, 0x5b, 0xf9, 0xcc, 0x41, 0xda, 0xa3, 0xa2, 0x27, 0x50, 0x8c, 0x34, 0x35, 0x63, 0x28, 0x70,
	0x35, 0xae, 0x7e, 0xaf, 0x93, 0xc0, 0x10, 0x81, 0xca, 0x10, 0x3d, 0x86, 0x82, 0x69, 0x0f, 0x74,
	0x53, 0xa3, 0xe4, 0x44, 0x48, 0xd6, 0xb8, 0x7a, 0xa9, 0x93, 0xc0, 0x79, 0x1f, 0xc2, 0xe4, 0x04,
	0x1d, 0x02, 0x38, 0xd4, 0x76, 0x08, 0x65, 0x06, 0x71, 0x85, 0x94, 0xef, 0xf9, 0xc5, 0x9d, 0x3c,
	0xef, 0x4f, 0xdb, 0xf1, 0x9c, 0x54, 0xb3, 0x00, 0x39, 0x77, 0x7c, 0xfc, 0x9e, 0x0c, 0x58, 0xe5,
	0x0b, 0x07, 0x30, 0x63, 0xfd, 0x07, 0xd3, 0x18, 0x72, 0xb6, 0x2f, 0x1d, 0x39, 0x7e, 0x79, 0x27,
	0xc7, 0x7b, 0x7e, 0x6f, 0x9b, 0xea, 0xce, 0x29, 0x8e, 0x84, 0x9a, 0x45, 0x28, 0x38, 0x94, 0x0c,
	0x8d, 0x81, 0xce, 0x48, 0xe5, 0x6b, 0x1a, 0x8a, 0x73, 0x2c, 0x24, 0x02, 0x0a, 0x78, 0xda, 0xef,
	0x9c, 0xf3, 0x41, 0x4d, 0x99, 0xf9, 0x7f, 0x0a, 0x21, 0xa6, 0xdd, 0x8e, 0xb1, 0x18, 0x54, 0xba,
	0x51, 0x18, 0x07, 0xca, 0x13, 0x62, 0x9a, 0xda, 0x99, 0x65, 0x4f, 0x2c, 0xcd, 0x4b, 0xe0, 0xed,
	0x9f, 0x90, 0xaa, 0x71, 0xf5, 0xc5, 0xf5, 0x57, 0x77, 0x0a, 0x76, 0x48, 0x4c, 0xd3, 0x97, 0x69,
	0x85, 0x2a, 0x9d, 0x04, 0x2e, 0x79, 0xe2, 0x3b, 0xf3, 0x20, 0xda, 0x80, 0xfb, 0x9e, 0x9e, 0xe6,
	0x1d, 0x62, 0x81, 0xd2, 0x61, 0x20, 0xe4, 0x95, 0xd5, 0x4b, 0x87, 0xcc, 0x45, 0x6a, 0x40, 0x79,
	0xd6, 0x34, 0x4b, 0x95, 0x09, 0x53, 0xf1, 0x51, 0xcb, 0x34, 0x17, 0x82, 0xb4, 0xa9, 0x5b, 0x23,
	0x21, 0x5b, 0xe3, 0xea, 0x05, 0xec, 0xff, 0x47, 0x6f, 0x21, 0x3b, 0xf2, 0x3e, 0xa8, 0x2b, 0xe4,
	0xfc, 0x7b, 0x7b, 0xfd, 0xb7, 0xf7, 0x26, 0xfa, 0xbf, 0x4a, 0x0b, 0x87, 0x7a, 0xde, 0xc6, 0xb8,
	0x8c, 0x6a, 0x17, 0xba, 0x39, 0x26, 0x42, 0xde, 0x1b, 0xd9, 0xe1, 0x70, 0xde, 0x65, 0xf4, 0x8d,
	0x87, 0x54, 0x54, 0xc8, 0x85, 0x1d, 0xff, 0xbe, 0x7e, 0xcd, 0x1c, 0x64, 0xfc, 0xa9, 0xcd, 0x0c,
	0xa4, 0xdc, 0xf1, 0x79, 0x73, 0x09, 0x16, 0x4c, 0x83, 0x11, 0xaa, 0x9b, 0xc1, 0xfc, 0xd5, 0x4f,
	0x49, 0x28, 0xdd, 0xba, 0x0b, 0x24, 0xc0, 0x72, 0x4b, 0x52, 0x25, 0xf5, 0x68, 0x5f, 0xd6, 0x0e,
	0x7a, 0xfd, 0x7d, 0x79, 0x4b, 0xd9, 0x56, 0xe4, 0x16, 0x9f, 0x40, 0x0f, 0xa0, 0x3c, 0xad, 0x34,
	0xf7, 0xf6, 0xba, 0xda, 0xb6, 0xd4, 0xed, 0xcb, 0x3c, 0x87, 0x56, 0x00, 0xc5, 0x0b, 0x2a, 0x3e,
	0x90, 0xf9, 0x24, 0x5a, 0x06, 0x7e, 0x8a, 0xb7, 0xe4, 0x2d, 0x65, 0x57, 0xea, 0xf2, 0xa9, 0x18,
	0xaa, 0xf4, 0x54, 0xb9, 0x2d, 0x63, 0x3e, 0x8d, 0xca, 0xb0, 0x34, 0x45, 0xfb, 0x2a, 0x56, 0x7a,
	0x6d, 0x3e, 0x13, 0xa3, 0x4a, 0xbd, 0x23, 0xed, 0x00, 0x2b, 0x7c, 0x16, 0x95, 0x60, 0x61, 0x26,
	0x2b, 0xa9, 0x32, 0x9f, 0x8b, 0x41, 0xaa, 0xb2, 0x2b, 0xf3, 0xf9, 0x98, 0x29, 0x8f, 0x15, 0xe0,
	0x05, 0x54, 0x81, 0x95, 0x99, 0x59, 0xa9, 0x2f, 0x3f, 0xdf, 0x8c, 0xe6, 0x41, 0x2c, 0xfb, 0xe1,
	0x8e, 0xaa, 0x75, 0x15, 0x55, 0xc6, 0x52, 0x97, 0x2f, 0x36, 0x7b, 0xdf, 0xaf, 0xab, 0xdc, 0xd5,
	0x75, 0x95, 0xfb, 0x79, 0x5d, 0xe5, 0x3e, 0xde, 0x54, 0x13, 0x57, 0x37, 0xd5, 0xc4, 0x8f, 0x9b,
	0x6a, 0xe2, 0xdd, 0xe6, 0xc8, 0x60, 0xa7, 0xe3, 0x63, 0x71, 0x60, 0x9f, 0x37, 0xfc, 0x35, 0x79,
	0x66, 0x11, 0x36, 0xb1, 0xe9, 0x59, 0x78, 0x32, 0xc9, 0x70, 0x44, 0x68, 0xe3, 0x43, 0xf0, 0x8c,
	0x0f, 0x82, 0x5d, 0x39, 0xce, 0xfa, 0xef, 0xf6, 0xc6, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x38,
	0xf7, 0x11, 0xf6, 0xe3, 0x05, 0x00, 0x00,
}

func (m *CompactDataset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompactDataset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompactDataset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewIris) > 0 {
		for iNdEx := len(m.NewIris) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.NewIris[iNdEx])
			copy(dAtA[i:], m.NewIris[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.NewIris[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Nodes) > 0 {
		for iNdEx := len(m.Nodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CompactDataset_Node) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompactDataset_Node) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompactDataset_Node) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Properties) > 0 {
		for iNdEx := len(m.Properties) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Properties[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Subject != nil {
		{
			size := m.Subject.Size()
			i -= size
			if _, err := m.Subject.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *CompactDataset_Node_InternalId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompactDataset_Node_InternalId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.InternalId != nil {
		i -= len(m.InternalId)
		copy(dAtA[i:], m.InternalId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.InternalId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *CompactDataset_Node_LocalRef) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompactDataset_Node_LocalRef) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64((uint32(m.LocalRef)<<1)^uint32((m.LocalRef>>31))))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *CompactDataset_Properties) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompactDataset_Properties) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompactDataset_Properties) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Objects) > 0 {
		for iNdEx := len(m.Objects) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Objects[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Predicate != nil {
		{
			size := m.Predicate.Size()
			i -= size
			if _, err := m.Predicate.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *CompactDataset_Properties_InternalId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompactDataset_Properties_InternalId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.InternalId != nil {
		i -= len(m.InternalId)
		copy(dAtA[i:], m.InternalId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.InternalId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *CompactDataset_Properties_LocalRef) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompactDataset_Properties_LocalRef) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64((uint32(m.LocalRef)<<1)^uint32((m.LocalRef>>31))))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *CompactDataset_ObjectGraph) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompactDataset_ObjectGraph) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompactDataset_ObjectGraph) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LiteralValue != nil {
		{
			size := m.LiteralValue.Size()
			i -= size
			if _, err := m.LiteralValue.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Graphs) > 0 {
		for iNdEx := len(m.Graphs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Graphs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Lang) > 0 {
		i -= len(m.Lang)
		copy(dAtA[i:], m.Lang)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Lang)))
		i--
		dAtA[i] = 0x32
	}
	if m.Sum != nil {
		{
			size := m.Sum.Size()
			i -= size
			if _, err := m.Sum.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *CompactDataset_ObjectGraph_ObjectInternalId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompactDataset_ObjectGraph_ObjectInternalId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ObjectInternalId != nil {
		i -= len(m.ObjectInternalId)
		copy(dAtA[i:], m.ObjectInternalId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ObjectInternalId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *CompactDataset_ObjectGraph_ObjectLocalRef) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompactDataset_ObjectGraph_ObjectLocalRef) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64((uint32(m.ObjectLocalRef)<<1)^uint32((m.ObjectLocalRef>>31))))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *CompactDataset_ObjectGraph_WellKnownDatatype) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompactDataset_ObjectGraph_WellKnownDatatype) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.WellKnownDatatype))
	i--
	dAtA[i] = 0x18
	return len(dAtA) - i, nil
}
func (m *CompactDataset_ObjectGraph_DataTypeInternalId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompactDataset_ObjectGraph_DataTypeInternalId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DataTypeInternalId != nil {
		i -= len(m.DataTypeInternalId)
		copy(dAtA[i:], m.DataTypeInternalId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.DataTypeInternalId)))
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *CompactDataset_ObjectGraph_DataTypeLocalRef) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompactDataset_ObjectGraph_DataTypeLocalRef) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64((uint32(m.DataTypeLocalRef)<<1)^uint32((m.DataTypeLocalRef>>31))))
	i--
	dAtA[i] = 0x28
	return len(dAtA) - i, nil
}
func (m *CompactDataset_ObjectGraph_StrValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompactDataset_ObjectGraph_StrValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.StrValue)
	copy(dAtA[i:], m.StrValue)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.StrValue)))
	i--
	dAtA[i] = 0x42
	return len(dAtA) - i, nil
}
func (m *CompactDataset_ObjectGraph_GraphID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompactDataset_ObjectGraph_GraphID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompactDataset_ObjectGraph_GraphID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Graph != nil {
		{
			size := m.Graph.Size()
			i -= size
			if _, err := m.Graph.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *CompactDataset_ObjectGraph_GraphID_InternalId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompactDataset_ObjectGraph_GraphID_InternalId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.InternalId != nil {
		i -= len(m.InternalId)
		copy(dAtA[i:], m.InternalId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.InternalId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *CompactDataset_ObjectGraph_GraphID_LocalRef) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompactDataset_ObjectGraph_GraphID_LocalRef) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64((uint32(m.LocalRef)<<1)^uint32((m.LocalRef>>31))))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CompactDataset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.NewIris) > 0 {
		for _, s := range m.NewIris {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *CompactDataset_Node) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Subject != nil {
		n += m.Subject.Size()
	}
	if len(m.Properties) > 0 {
		for _, e := range m.Properties {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *CompactDataset_Node_InternalId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InternalId != nil {
		l = len(m.InternalId)
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CompactDataset_Node_LocalRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sozTypes(uint64(m.LocalRef))
	return n
}
func (m *CompactDataset_Properties) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Predicate != nil {
		n += m.Predicate.Size()
	}
	if len(m.Objects) > 0 {
		for _, e := range m.Objects {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *CompactDataset_Properties_InternalId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InternalId != nil {
		l = len(m.InternalId)
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CompactDataset_Properties_LocalRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sozTypes(uint64(m.LocalRef))
	return n
}
func (m *CompactDataset_ObjectGraph) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sum != nil {
		n += m.Sum.Size()
	}
	l = len(m.Lang)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Graphs) > 0 {
		for _, e := range m.Graphs {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.LiteralValue != nil {
		n += m.LiteralValue.Size()
	}
	return n
}

func (m *CompactDataset_ObjectGraph_ObjectInternalId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ObjectInternalId != nil {
		l = len(m.ObjectInternalId)
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CompactDataset_ObjectGraph_ObjectLocalRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sozTypes(uint64(m.ObjectLocalRef))
	return n
}
func (m *CompactDataset_ObjectGraph_WellKnownDatatype) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.WellKnownDatatype))
	return n
}
func (m *CompactDataset_ObjectGraph_DataTypeInternalId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DataTypeInternalId != nil {
		l = len(m.DataTypeInternalId)
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CompactDataset_ObjectGraph_DataTypeLocalRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sozTypes(uint64(m.DataTypeLocalRef))
	return n
}
func (m *CompactDataset_ObjectGraph_StrValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StrValue)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *CompactDataset_ObjectGraph_GraphID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Graph != nil {
		n += m.Graph.Size()
	}
	return n
}

func (m *CompactDataset_ObjectGraph_GraphID_InternalId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InternalId != nil {
		l = len(m.InternalId)
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CompactDataset_ObjectGraph_GraphID_LocalRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sozTypes(uint64(m.LocalRef))
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CompactDataset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompactDataset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompactDataset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &CompactDataset_Node{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewIris", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewIris = append(m.NewIris, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompactDataset_Node) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Subject = &CompactDataset_Node_InternalId{v}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalRef", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Subject = &CompactDataset_Node_LocalRef{v}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Properties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Properties = append(m.Properties, &CompactDataset_Properties{})
			if err := m.Properties[len(m.Properties)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompactDataset_Properties) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Properties: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Properties: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Predicate = &CompactDataset_Properties_InternalId{v}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalRef", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Predicate = &CompactDataset_Properties_LocalRef{v}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Objects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Objects = append(m.Objects, &CompactDataset_ObjectGraph{})
			if err := m.Objects[len(m.Objects)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompactDataset_ObjectGraph) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObjectGraph: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObjectGraph: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectInternalId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Sum = &CompactDataset_ObjectGraph_ObjectInternalId{v}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectLocalRef", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Sum = &CompactDataset_ObjectGraph_ObjectLocalRef{v}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WellKnownDatatype", wireType)
			}
			var v CompactDataset_WellknownDatatype
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= CompactDataset_WellknownDatatype(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sum = &CompactDataset_ObjectGraph_WellKnownDatatype{v}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataTypeInternalId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Sum = &CompactDataset_ObjectGraph_DataTypeInternalId{v}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataTypeLocalRef", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Sum = &CompactDataset_ObjectGraph_DataTypeLocalRef{v}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lang", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lang = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Graphs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Graphs = append(m.Graphs, &CompactDataset_ObjectGraph_GraphID{})
			if err := m.Graphs[len(m.Graphs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiteralValue = &CompactDataset_ObjectGraph_StrValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompactDataset_ObjectGraph_GraphID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GraphID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GraphID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Graph = &CompactDataset_ObjectGraph_GraphID_InternalId{v}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalRef", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Graph = &CompactDataset_ObjectGraph_GraphID_LocalRef{v}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
