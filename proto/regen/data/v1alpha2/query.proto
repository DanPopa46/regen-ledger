syntax = "proto3";

package regen.data.v1alpha2;

import "google/protobuf/timestamp.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "regen/data/v1alpha2/types.proto";

option go_package = "github.com/regen-network/regen-ledger/x/data";

// Query is the regen.data.v1alpha1 Query service
service Query {
  // ByContentHash queries data based on its ContentHash.
  rpc ByContentHash (QueryByContentHashRequest) returns (QueryByContentHashResponse);

  // BySigner queries data based on signers.
  rpc BySigner (QueryBySignerRequest) returns (QueryBySignerResponse);

  rpc IDsByIRI (QueryIDsByIRIRequest) returns (QueryIDsByIRIResponse);

  rpc IRIsByID (QueryIRIsByIDRequest) returns (QueryIRIsByIDResponse);

  rpc ByIRI (QueryByIRIRequest) returns (QueryByIRIResponse)

  rpc ValidateGraph (ValidateGraphRequest) returns (ValidateGraphResponse);

  rpc ValidateShapesGraph (ValidateShapesGraphRequest) returns (ValidateShapesGraphResponse);

  rpc ConvertToCompactDataset (ConvertToCompactDatasetRequest) returns (ConvertToCompactDatasetResponse);
  rpc ConvertFromCompactDataset (ConvertFromCompactDatasetRequest) returns (ConvertFromCompactDatasetResponse);
}

// QueryByContentHashRequest is the Query/ByContentHash request type.
message QueryByContentHashRequest {

  // id is the hash-based identifier for the anchored content.
  ContentHash id = 1;
}

// QueryByContentHashResponse is the Query/ByContentHash response type.
message QueryByContentHashResponse {
  // timestamp is the timestamp of the block at which the data was anchored.
  google.protobuf.Timestamp timestamp = 1;

  // signers are the addresses of the accounts which have signed the data.
  repeated string signers = 2;

  string iri = 3;

  // content is the content of the data, if it was stored on-chain.
  Content content = 4;
}

// QueryBySignerRequest is the Query/BySigner request type.
message QueryBySignerRequest {

  // signer is the address of the signer to query by.
  string signer = 1;

  // pagination is the PageRequest to use for pagination.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryBySignerResponse is the Query/BySigner response type.
message QueryBySignerResponse {

  // ids are in the IDs returned in this page of the query.
  repeated ContentHash ids = 1;

  // pagination is the pagination PageResponse.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryIDsByIRIRequest {
  repeated string iris = 1;
}

message QueryIDsByIRIResponse {
  // id's with the value 0 indicate that the IRI does not have an ID yet and that
  // one must be registered with Msg/RegisterIRIs
  repeated uint64 ids = 1;
}

message QueryIRIsByIDRequest {
  repeated uint64 ids = 1;
}

message QueryIRIsByIDResponse {
  repeated string iris = 1;
}

message Content {
  oneof sum {
    bytes raw_data = 1;
    CompactDataset graph_dataset = 2;
    bytes wkb_bytes = 3;
  }
}

message QueryByIRIRequest {
  string iri = 1;

  // accept is a list of MIME content types the client accepts like the HTTP Accept content header
  string accept = 2;
}

message QueryByIRIResponse {
  bytes body = 1;

  // content_type is the MIME type of the content like the HTTP Content-Type header
  string content_type = 2;
}

message ValidateGraphRequest {
  string data_graph_iri = 1;
  string shapes_graph_iri = 2;
  string accept = 3;
}

message ValidateGraphResponse {
  bytes content = 1;
  string content_type = 2;
}

message ValidateShapesGraphRequest {
  string shapes_graph_iri = 1;
  string accept = 2;
}

message ValidateShapesGraphResponse {
  bytes content = 1;
  string content_type = 2;
}

message ConvertToCompactDatasetRequest {
    bytes content = 1;
    string content_type = 2;
}

message ConvertToCompactDatasetResponse {
  CompactDataset.Dataset dataset = 1;
}

message ConvertFromCompactDatasetRequest {
  CompactDataset.Dataset dataset = 1;
  string accept = 2;
}

message ConvertFromCompactDatasetResponse {
  bytes content = 1;
  string content_type = 2;
}
