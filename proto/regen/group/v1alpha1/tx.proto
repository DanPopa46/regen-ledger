syntax = "proto3";

package regen.group.v1alpha1;

option go_package = "github.com/regen-network/regen-ledger/x/group";

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "google/protobuf/any.proto";
import "regen/group/v1alpha1/types.proto";

// Msg is the regen.group.v1alpha1 Msg service.
service Msg {

    // CreateGroup creates a new group with an admin account address, a list of members and an comment.
    rpc CreateGroup(MsgCreateGroupRequest) returns (MsgCreateGroupResponse);

    // UpdateGroupMembers updates the group members with given group id and admin address.
    rpc UpdateGroupMembers(MsgUpdateGroupMembersRequest) returns (MsgUpdateGroupMembersResponse);

    // UpdateGroupAdmin updates the group admin with given group id and previous admin address.
    rpc UpdateGroupAdmin(MsgUpdateGroupAdminRequest) returns (MsgUpdateGroupAdminResponse);

    // UpdateGroupComment updates the group comment with given group id and admin address.
    rpc UpdateGroupComment(MsgUpdateGroupCommentRequest) returns (MsgUpdateGroupCommentResponse);

    // CreateGroupAccount creates a new group account using given DecisionPolicy. 
    rpc CreateGroupAccount(MsgCreateGroupAccountRequest) returns (MsgCreateGroupAccountResponse);

    // UpdateGroupAccountAdmin updates a group account admin. 
    rpc UpdateGroupAccountAdmin(MsgUpdateGroupAccountAdminRequest) returns (MsgUpdateGroupAccountAdminResponse);

    // UpdateGroupAccountDecisionPolicy allows a group account decision policy to be updated.
    rpc UpdateGroupAccountDecisionPolicy(MsgUpdateGroupAccountDecisionPolicyRequest) returns (MsgUpdateGroupAccountDecisionPolicyResponse);

    // UpdateGroupAccountComment updates a group account comment.
    rpc UpdateGroupAccountComment(MsgUpdateGroupAccountCommentRequest) returns (MsgUpdateGroupAccountCommentResponse);

    // CreateProposal submits a new proposal.
    rpc CreateProposal(MsgCreateProposalRequest) returns (MsgCreateProposalResponse);

    // Vote allows voters to vote on a proposal.
    rpc Vote(MsgVoteRequest) returns (MsgVoteResponse);

    // Exec executes a proposal.
    rpc Exec(MsgExecRequest) returns (MsgExecResponse);
}

//
// Groups
//

// MsgCreateGroupRequest is the Msg/CreateGroup request type.
message MsgCreateGroupRequest {

    // admin is the account address of the group admin.
    bytes admin = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
    
    // members defines the group members.
    repeated Member members = 2 [(gogoproto.nullable) = false];
    
    // group is the group's comment.
    string comment = 3;
}

// MsgCreateGroupResponse is the Msg/CreateGroup response type.
message MsgCreateGroupResponse {

    // group_id is the unique ID of the newly created group.
    uint64 group_id = 1 [(gogoproto.casttype) = "ID"];
}

// MsgUpdateGroupMembersRequest is the Msg/UpdateGroupMembers request type.
message MsgUpdateGroupMembersRequest {

    // admin is the account address of the group admin.
    bytes admin = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
    
    // group_id is the unique ID of the group.
    uint64 group_id = 2 [(gogoproto.casttype) = "ID"];
    
    // member_updates is the list of members to update,
    // set power to 0 to remove a member.
    repeated Member member_updates = 3 [(gogoproto.nullable) = false];
}

// MsgUpdateGroupMembersResponse is the Msg/UpdateGroupMembers response type.
message MsgUpdateGroupMembersResponse { }

// MsgUpdateGroupAdminRequest is the Msg/UpdateGroupAdmin request type.
message MsgUpdateGroupAdminRequest {

    // admin is the current account address of the group admin.
    bytes admin = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
    
    // group_id is the unique ID of the group.
    uint64 group_id = 2 [(gogoproto.casttype) = "ID"];
   
    // new_admin is the group new admin account address.
    bytes new_admin = 3 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
}

// MsgUpdateGroupAdminResponse is the Msg/UpdateGroupAdmin response type.
message MsgUpdateGroupAdminResponse { }

// MsgUpdateGroupCommentRequest is the Msg/UpdateGroupComment request type.
message MsgUpdateGroupCommentRequest {

    // admin is the account address of the group admin.
    bytes admin = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
    
    // group_id is the unique ID of the group.
    uint64 group_id = 2 [(gogoproto.casttype) = "ID"];
    
    // comment is the updated group's comment.
    string comment = 3;
}

// MsgUpdateGroupCommentResponse is the Msg/UpdateGroupComment response type.
message MsgUpdateGroupCommentResponse { }

//
// Group Accounts
//

// MsgCreateGroupAccountRequest is the Msg/CreateGroupAccount request type.
message MsgCreateGroupAccountRequest {
    option (gogoproto.goproto_getters) = false;

    // admin is the account address of the group admin.
    bytes admin = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
    
    // group_id is the unique ID of the group.
    uint64 group_id = 2 [(gogoproto.casttype) = "ID"];
    
    // comment is the group account's comment.
    string comment = 3;

    // decision_policy specifies the group account's decision policy.
    google.protobuf.Any decision_policy = 4 [(cosmos_proto.accepts_interface) = "DecisionPolicy"];
}

// MsgCreateGroupAccountResponse is the Msg/CreateGroupAccount response type.
message MsgCreateGroupAccountResponse {

    // group_account is the account address of the newly created group account.
    bytes group_account = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
}

// MsgUpdateGroupAccountAdminRequest is the Msg/UpdateGroupAccountAdmin request type.
message MsgUpdateGroupAccountAdminRequest {

    // admin is the account address of the group admin.
    bytes admin = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
    
    // group_account is the group account address.
    bytes group_account = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
    
    // new_admin is the new group account admin.
    bytes new_admin = 3 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
}

// MsgUpdateGroupAccountAdminResponse is the Msg/UpdateGroupAccountAdmin response type.
message MsgUpdateGroupAccountAdminResponse { }

// MsgUpdateGroupAccountDecisionPolicyRequest is the Msg/UpdateGroupAccountDecisionPolicy request type.
message MsgUpdateGroupAccountDecisionPolicyRequest {
    option (gogoproto.goproto_getters) = false;

    // admin is the account address of the group admin.
    bytes admin = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
    
    // group_account is the group account address.
    bytes group_account = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
    
    // decision_policy is the updated group account decision policy.
    google.protobuf.Any decision_policy = 3 [(cosmos_proto.accepts_interface) = "DecisionPolicy"];
}

// MsgUpdateGroupAccountDecisionPolicyResponse is the Msg/UpdateGroupAccountDecisionPolicy response type.
message MsgUpdateGroupAccountDecisionPolicyResponse { }

// MsgUpdateGroupAccountCommentRequest is the Msg/UpdateGroupAccountComment request type.
message MsgUpdateGroupAccountCommentRequest {

    // admin is the account address of the group admin.
    bytes admin = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
    
    // group_account is the group account address.
    bytes group_account = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
    
    // comment is the updated group account comment.
    string comment = 3;
}

// MsgUpdateGroupAccountCommentResponse is the Msg/UpdateGroupAccountComment response type.
message MsgUpdateGroupAccountCommentResponse { }

//
// Proposals and Voting
//

// MsgCreateProposalRequest is the Msg/CreateProposal request type.
message MsgCreateProposalRequest {
    option (gogoproto.goproto_getters) = false;

    // group_account is the group account address.
    bytes group_account = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
    
    // proposers are the account addresses of the proposers.
    // Proposers signatures will be counted as yes votes.
    repeated bytes proposers = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
    
    // comment is the proposal's comment.
    string comment = 3;

    // msgs is a list of Msgs that will be executed if the proposal passes.
    repeated google.protobuf.Any msgs = 4;
}

// MsgCreateProposalResponse is the Msg/CreateProposal response type.
message MsgCreateProposalResponse {

    // proposal is the unique ID of the proposal.
    uint64 proposal_id = 1 [(gogoproto.casttype) = "ProposalID"];
}

// MsgVoteRequest is the Msg/Vote request type.
message MsgVoteRequest {

    // proposal is the unique ID of the proposal.
    uint64 proposal_id = 1 [(gogoproto.casttype) = "ProposalID"];
    
    // voters is the lists of voters' account addresses.
    repeated bytes voters = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
    
    // choice is the voters' choice on the proposal.
    Choice choice = 3;

    // comment's is the vote's comment.
    string comment = 4;
}

// MsgVoteResponse is the Msg/Vote response type.
message MsgVoteResponse { }

// MsgExecRequest is the Msg/Exec request type.
message MsgExecRequest {

    // proposal is the unique ID of the proposal.
    uint64 proposal_id = 1 [(gogoproto.casttype) = "ProposalID"];
    
    // signer is the account address used to execute the proposal.
    bytes signer = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
}

// MsgExecResponse is the Msg/Exec request type.
message MsgExecResponse { }


