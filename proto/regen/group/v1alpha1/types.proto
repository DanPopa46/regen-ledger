syntax = "proto3";

package regen.group.v1alpha1;

option go_package = "github.com/regen-network/regen-ledger/x/group/types";

import "gogoproto/gogo.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "cosmos_proto/cosmos.proto";
import "google/protobuf/any.proto";

message Member {
    bytes address = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
    string power = 2 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false];
    string comment = 3;
}

// ThresholdDecisionPolicy implements the DecisionPolicy interface
message ThresholdDecisionPolicy {
    option (cosmos_proto.implements_interface) = "DecisionPolicy";

    // threshold is a fix weight value that must be met or exceeded for a proposal to succeed.
    string threshold = 1 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false];
    // timeout is the duration from submission of a proposal to the end of voting period
    // Within this times votes and exec messages can be submitted.
    google.protobuf.Duration timeout = 2 [(gogoproto.nullable) = false];
}

enum Choice {
    UNKNOWN = 0;
    NO = 1;
    YES = 2;
    ABSTAIN = 3;
    VETO = 4;
}

//
// State
//

message GroupMetadata {
    uint64 group = 1 [(gogoproto.casttype) = "GroupID"];
    bytes admin = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
    string comment = 3;
    // version is used to track changes to a group's membership structure that
    // would break existing proposals. Whenever any members power is changed,
    // or any member is added or removed this version is incremented and will
    // cause proposals based on older versions of this group to fail
    uint64 version = 4;
    string totalWeight = 5 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false];
}

message GroupMember {
    uint64 group = 1 [(gogoproto.casttype) = "GroupID"];
    // todo: @aaronc field has different name in `Member.address`. Can we unify this?
    bytes member = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
    // todo: @aaronc it is `Member.power`. Can we unify this?
    string weight = 3 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false];
    string comment = 4; // TODO: @aaronc was comment missing by intention?
}

// GroupAccountMetadata specifies group account metadata
message GroupAccountMetadata {
    option (gogoproto.equal)            = true;
    option (gogoproto.goproto_getters) = false;

    bytes group_account = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
    uint64 group = 2 [(gogoproto.casttype) = "GroupID"];
    bytes admin = 3 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
    string comment = 4;
    // version is used to track changes to a group's GroupAccountMetadata structure that
    // would create a different result on a running proposal.
    uint64 version = 5;
    google.protobuf.Any decision_policy = 6 [(cosmos_proto.accepts_interface) = "DecisionPolicy"];
}

// ProposalBase is the base proposal type that app should use to implement a Proposal type based
// on their app Msg type.
//
// Ex:
// message MyAppProposal {
//   ProposalBase base = 1;
//   repeated MyAppMsg msgs = 2;
// }
message ProposalBase {
    bytes group_account = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
    string comment = 2;
    repeated bytes proposers = 3 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
    google.protobuf.Timestamp submitted_at = 4 [(gogoproto.nullable) = false];
    // GroupVersion tracks the version of the group that this proposal corresponds to. When group membership is changed
    // existing proposals for prior group versions will become invalid.
    uint64 group_version = 5;
    // GroupAccountVersion tracks the version of the group account that this proposal corresponds to. When a decision policy is changed
    // an existing proposals for prior policy versions will become invalid.
    uint64 group_account_version = 6;

    enum Status {
        option (gogoproto.goproto_enum_prefix) = false;
        // An empty value is invalid and not allowed
        PROPOSAL_STATUS_INVALID = 0 [(gogoproto.enumvalue_customname) = "ProposalStatusInvalid"];
        // Initial status of a proposal when persisted.
        PROPOSAL_STATUS_SUBMITTED = 1 [(gogoproto.enumvalue_customname) = "ProposalStatusSubmitted"];
        // Final status of a proposal when the final tally was executed
        PROPOSAL_STATUS_CLOSED = 2 [(gogoproto.enumvalue_customname) = "ProposalStatusClosed"];
        // Final status of a proposal when the group was modified before the final tally.
        PROPOSAL_STATUS_ABORTED = 3 [(gogoproto.enumvalue_customname) = "ProposalStatusAborted"];

        // TODO: do we want to support a withdrawn operation?
        // A proposal can be deleted before the voting start time by the owner. When this happens the final status
        // is Withdrawn.
        //        PROPOSAL_STATUS_WITHDRAWN = 4 [(gogoproto.enumvalue_customname) = "Withdrawn"];
    }
    // Status represents the high level position in the life cycle of the proposal. Initial value is Submitted.
    Status status = 7;
    enum Result {
        option (gogoproto.goproto_enum_prefix) = false;
        // An empty value is invalid and not allowed
        PROPOSAL_RESULT_INVALID = 0 [(gogoproto.enumvalue_customname) = "ProposalResultInvalid"];
        // Until a final tally has happened the status is undefined
        PROPOSAL_RESULT_UNDEFINED = 1 [(gogoproto.enumvalue_customname) = "ProposalResultUndefined"];
        // Final result of the tally
        PROPOSAL_RESULT_ACCEPTED = 2 [(gogoproto.enumvalue_customname) = "ProposalResultAccepted"];
        // Final result of the tally
        PROPOSAL_RESULT_REJECTED = 3 [(gogoproto.enumvalue_customname) = "ProposalResultRejected"];
    }
    // Result is the final result based on the votes and election rule. Initial value is Undefined.
    // The result is persisted so that clients can always rely on this state and not have to replicate the logic.
    Result result = 8;

    // Tally contains the sums of all weighted votes for this proposal.
    Tally vote_state = 9 [(gogoproto.nullable) = false];

    // Timestamp of the block where the proposal execution times out. Header times of the votes and execution messages
    // must be before this end time to be included in the election. After the timeout timestamp the proposal can not be
    // executed anymore and should be considered pending delete.
    google.protobuf.Timestamp timeout = 10 [(gogoproto.nullable) = false];

    enum ExecutorResult {
        option (gogoproto.goproto_enum_prefix) = false;
        // An empty value is not allowed
        PROPOSAL_EXECUTOR_RESULT_INVALID = 0  [(gogoproto.enumvalue_customname) = "ProposalExecutorResultInvalid"];
        // We have not yet run the executor
        PROPOSAL_EXECUTOR_RESULT_NOT_RUN = 1 [(gogoproto.enumvalue_customname) = "ProposalExecutorResultNotRun"];
        // The executor was successful and proposed action updated state
        PROPOSAL_EXECUTOR_RESULT_SUCCESS = 2 [(gogoproto.enumvalue_customname) = "ProposalExecutorResultSuccess"];
        // The executor returned an error and proposed action didn't update state
        PROPOSAL_EXECUTOR_RESULT_FAILURE = 3 [(gogoproto.enumvalue_customname) = "ProposalExecutorResultFailure"];
    }
    // Result is the final result based on the votes and election rule. Initial value is NotRun.
    ExecutorResult executor_result = 11;
}

message Tally {
    string yes_count = 1 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false];
    string no_count = 2 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false];
    string abstain_count = 3 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false];
    string veto_count = 4 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false];
}

message Vote {
    uint64 proposal = 1 [(gogoproto.casttype) = "ProposalID"];
    bytes voter = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
    Choice choice = 3;
    string comment = 4;
    google.protobuf.Timestamp submitted_at = 5 [(gogoproto.nullable) = false];
}
